/**
    Issue Link - https://leetcode.com/problems/minimum-path-sum/
*/

class Solution {
    public int minPathSum(int[][] grid) {
        return minSum(grid, 0, 0, grid.length, grid[0].length, new HashMap<String, Integer>());
    }
    private int minSum(int[][] grid, int currentRow, int currentCol, int m, int n, HashMap<String, Integer> memo){
        if(currentRow >= m || currentCol >= n)
            return 1000001;
        if(currentRow == m-1 && currentCol == n-1)
            return grid[currentRow][currentCol];
        
        String currKey = currentRow + "-" + currentCol;
        if(memo.containsKey(currKey))
            return memo.get(currKey);
        
        int currentCellVal = grid[currentRow][currentCol];
        int rightWay = currentCellVal + minSum(grid, currentRow, currentCol+1, m, n, memo);
        int downWay = currentCellVal + minSum(grid, currentRow+1, currentCol, m, n, memo);
        
        memo.put(currKey, Math.min(rightWay, downWay));
        return memo.get(currKey);
    }
}