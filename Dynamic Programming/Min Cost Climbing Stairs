/**
    Issue Link - https://leetcode.com/problems/min-cost-climbing-stairs/
*/

class Solution {
    public int minCostClimbingStairs(int[] cost) {
      HashMap<Integer, Integer> memo =  new HashMap<Integer, Integer>();
      return Math.min(minCost(cost, 0, memo), memo.get(1));    
    }
    private int minCost(int[] cost, int currStair, HashMap<Integer, Integer> memo){
        if(currStair == cost.length)
            return 0;
        if(currStair > cost.length)
            return 1001;
        
        int currKey = currStair;
        if(memo.containsKey(currKey))
            return memo.get(currKey);
        
        int oneJ = cost[currStair] + minCost(cost, currStair+1, memo);
        int twoJ = cost[currStair] + minCost(cost, currStair+2, memo);
        
        memo.put(currKey, Math.min(oneJ, twoJ));
        return memo.get(currKey);
    }
}